# Generated by Django 3.2.20 on 2024-02-08 18:26

from typing import cast
import core.managers
from django.db import migrations, models
from django.db.models import functions as dbf, Value as V, F
from django.apps.registry import Apps
import re

from django.utils import timezone


def migrate_policy_flatpages(app_registry: Apps, schema_editor):
    FlatpagePolicy = app_registry.get_model('core', 'FlatpagePolicy')
    StandalonePolicy = app_registry.get_model('core', 'Policy')

    policies = (
        FlatpagePolicy.objects
        .filter(url__startswith='/privacy-policy-')
        .annotate(
            version=dbf.Substr(  # Poor man's regex ^/privacy-policy-(.+)/$
                dbf.Substr('url', 1, dbf.Length('url') - 1, output_field=models.CharField()),
                len('/privacy-policy-') + 1)
        )
        .order_by('id')
        .values('id', 'content', 'version')
    )
    previous_policy_effective_date = timezone.datetime.fromisoformat('2015-12-31')
    for policy in policies:
        try:
            m = re.match(r'^{#\s+([0-9-]+)\s+#}\s*(.+)', policy['content'], re.DOTALL)
            date, content = cast(re.Match[str], m).groups()
            policy['date'] = timezone.datetime.strptime(date, r'%Y-%m-%d').date()
            policy['content'] = content
        except Exception:
            pass
        current_policy_effective_date = policy.get(
            'date',
            previous_policy_effective_date + timezone.timedelta(days=1))
        StandalonePolicy.objects.create(
            version=policy['version'],
            effective_date=current_policy_effective_date,
            content=policy['content'],
        )
        previous_policy_effective_date = current_policy_effective_date
        FlatpagePolicy.objects.filter(pk=policy['id']).update(
            title=dbf.Concat(V("[BACKUP] "), F('title'))
        )


def restore_policy_flatpages(app_registry: Apps, schema_editor):
    FlatpagePolicy = app_registry.get_model('core', 'FlatpagePolicy')
    FlatpagePolicy.objects.filter(url__startswith='/privacy-policy-').update(
        title=dbf.Replace(F('title'), V("[BACKUP] "))
    )


class Migration(migrations.Migration):

    dependencies = [
        ('flatpages', '0001_initial'),
        ('core', '0012_geo_api_keys_as_json'),
    ]

    operations = [
        migrations.RenameModel(
            old_name='Policy',
            new_name='FlatpagePolicy',
        ),
        # migrations.DeleteModel(
        #     name='Policy',
        # ),
        # migrations.CreateModel(
        #     name='OldPolicy',
        #     fields=[
        #     ],
        #     options={
        #         'proxy': True,
        #         'indexes': [],
        #         'constraints': [],
        #     },
        #     bases=('flatpages.flatpage',),
        #     managers=[
        #         ('objects', core.managers.PoliciesManager()),
        #     ],
        # ),

        migrations.CreateModel(
            name='Policy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.SlugField(help_text='Avoid modifying already-existing versions.', max_length=50, unique=True, verbose_name='version of policy')),
                ('effective_date', models.DateField(unique=True, verbose_name='in effect from date')),
                ('changes_summary', models.TextField(blank=True, verbose_name='summary of changes')),
                ('content', models.TextField(verbose_name='content')),
                ('requires_consent', models.BooleanField(default=True, verbose_name='consent is required')),
            ],
            options={
                'verbose_name': 'policy',
                'verbose_name_plural': 'policies',
                'get_latest_by': 'effective_date',
            },
            managers=[
                ('objects', core.managers.PoliciesManager()),
            ],
        ),

        migrations.RunPython(migrate_policy_flatpages, reverse_code=restore_policy_flatpages),

        migrations.DeleteModel(
            name='FlatpagePolicy',
        ),
    ]
